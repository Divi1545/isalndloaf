{
 "files": {
   "README.md": "# AI Code Agency - Comprehensive Airtable Management System\n\n![AI Code Agency](https://img.shields.io/badge/AI%20Code%20Agency-Airtable%20Manager-blue)\n![Python](https://img.shields.io/badge/Python-3.8+-green)\n![Flask](https://img.shields.io/badge/Flask-2.0+-red)\n![Airtable](https://img.shields.io/badge/Airtable-API-orange)\n\nA comprehensive business management system built specifically for AI Code Agency, integrating with Airtable to manage vendors, services, bookings, payments, marketing campaigns, AI training, and detailed analytics.\n\n## üåü Features\n\n### Core Business Management\n- **Vendor Management**: Complete vendor lifecycle management with ratings and contact info\n- **Service Catalog**: Manage all services with pricing and categories\n- **Booking System**: Handle customer bookings with status tracking\n- **Payment Tracking**: Monitor payments and revenue in LKR\n- **Customer Feedback**: Collect and analyze customer satisfaction\n\n### Advanced Features\n- **Marketing Campaigns**: Plan, track, and analyze marketing efforts\n- **AI Agent Training**: Monitor and schedule AI model training sessions\n- **Comprehensive Reports**: Generate detailed business analytics\n- **System Logging**: Track all system activities and changes\n- **Real-time Dashboard**: Visual overview of business metrics\n\n### Technical Features\n- **Airtable Integration**: Seamless synchronization with Airtable database\n- **Responsive Design**: Bootstrap-based UI that works on all devices\n- **Interactive Charts**: Chart.js powered analytics and visualizations\n- **RESTful API**: Clean API endpoints for all operations\n- **Real-time Updates**: Live data synchronization\n\n## üöÄ Quick Start\n\n### Prerequisites\n- Python 3.8 or higher\n- Airtable account with API access\n- Replit account (for deployment)\n\n### Installation\n\n1. **Clone or Fork this Replit**\n   ```bash\n   # If running locally, clone the repository\n   git clone <repository-url>\n   cd ai-code-agency-airtable\n   ```\n\n2. **Set Up Environment Variables**\n   \n   In Replit, go to the Secrets tab and add:\n   ```\n   AIRTABLE_API_KEY=your_airtable_api_key_here\n   AIRTABLE_BASE_ID=your_airtable_base_id_here\n   SECRET_KEY=your_flask_secret_key_here\n   ```\n\n3. **Install Dependencies**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n4. **Run the Application**\n   ```bash\n   python main.py\n   ```\n\n5. **Access the Application**\n   - Local: `http://localhost:5000`\n   - Replit: Use the provided Replit URL\n\n## üìä Airtable Setup\n\n### Required Tables\n\nYour Airtable base should contain the following tables with these fields:\n\n#### 1. Vendors\n- Vendor ID (Single line text)\n- Name (Single line text)\n- Category (Single select)\n- Contact Email (Email)\n- Phone (Phone number)\n- Rating (Number)\n- Status (Single select: Active, Inactive)\n- Join Date (Date)\n\n#### 2. Services\n- Service ID (Single line text)\n- Service Name (Single line text)\n- Category (Single select)\n- Price LKR (Number)\n- Vendor ID (Link to Vendors)\n- Description (Long text)\n- Status (Single select)\n\n#### 3. Bookings\n- Booking ID (Single line text)\n- Customer Name (Single line text)\n- Customer Email (Email)\n- Service ID (Link to Services)\n- Booking Date (Date)\n- Status (Single select)\n- Total Amount LKR (Number)\n\n#### 4. Payments\n- Payment ID (Single line text)\n- Booking ID (Link to Bookings)\n- Amount LKR (Number)\n- Payment Method (Single select)\n- Payment Date (Date)\n- Status (Single select)\n\n#### 5. CustomerFeedback\n- Feedback ID (Single line text)\n- Booking ID (Link to Bookings)\n- Rating (Number)\n- Comments (Long text)\n- Date Submitted (Date)\n\n#### 6. MarketingCampaigns\n- Campaign ID (Single line text)\n- Campaign Name (Single line text)\n- Vendor ID (Link to Vendors)\n- Start Date (Date)\n- End Date (Date)\n- Budget LKR (Number)\n- Channel (Single select)\n- KPI (Single line text)\n- Leads Generated (Number)\n- Status (Single select)\n\n#### 7. AgentTraining\n- Training ID (Single line text)\n- Agent Name (Single line text)\n- Version (Single line text)\n- Dataset Source (Single line text)\n- Last Train Date (Date)\n- Next Scheduled Train (Date)\n- Accuracy (Number)\n- Notes (Long text)\n\n#### 8. SystemLogs\n- Log ID (Single line text)\n- Event Time (Date)\n- Event Type (Single select)\n- Table (Single line text)\n- Record ID (Single line text)\n- User/Agent (Single line text)\n- Description (Long text)\n- Status (Single select)\n\n#### 9. Reports\n- Report ID (Single line text)\n- Report Name (Single line text)\n- Report Type (Single select)\n- Generated Date (Date)\n- Period From (Date)\n- Period To (Date)\n- Data (Long text)\n\n## üéØ Usage Guide\n\n### Dashboard Overview\nThe main dashboard provides:\n- Key business metrics (vendors, services, bookings, revenue)\n- Recent activity feed\n- Quick action buttons\n- System status indicators\n- Interactive charts showing trends\n\n### Vendor Management\n1. **Add New Vendor**: Click \"Add New Vendor\" from vendors page\n2. **Edit Vendor**: Click edit button on vendor list\n3. **View Performance**: Check vendor ratings and booking history\n4. **Status Management**: Activate/deactivate vendors\n\n### Service Management\n1. **Create Services**: Link services to specific vendors\n2. **Set Pricing**: Define pricing in LKR\n3. **Categorize**: Organize services by category\n4. **Status Control**: Enable/disable services\n\n### Booking System\n1. **New Booking**: Create bookings from the bookings page\n2. **Status Tracking**: Monitor booking progression\n3. **Customer Info**: Manage customer details\n4. **Payment Integration**: Link bookings to payments\n\n### Payment Tracking\n1. **Record Payments**: Log incoming payments\n2. **Method Tracking**: Track payment methods\n3. **Revenue Analysis**: Monitor income patterns\n4. **Status Management**: Track payment status\n\n### Marketing Campaigns\n1. **Campaign Planning**: Set campaign goals and budgets\n2. **Vendor Assignment**: Link campaigns to vendors\n3. **Performance Tracking**: Monitor leads and ROI\n4. **Multi-channel Support**: Track various marketing channels\n\n### AI Training Management\n1. **Training Schedules**: Plan AI model training sessions\n2. **Accuracy Tracking**: Monitor model performance\n3. **Version Control**: Track model versions\n4. **Dataset Management**: Link training to data sources\n\n### Reports & Analytics\n1. **Revenue Reports**: Comprehensive financial analysis\n2. **Vendor Performance**: Detailed vendor metrics\n3. **Service Popularity**: Service usage analytics\n4. **Customer Satisfaction**: Feedback analysis\n5. **Export Options**: PDF, Excel, CSV exports\n\n## üîß Configuration\n\n### Environment Variables\n\n```bash\n# Required\nAIRTABLE_API_KEY=your_api_key\nAIRTABLE_BASE_ID=your_base_id\nSECRET_KEY=your_secret_key\n\n# Optional\nFLASK_ENV=development\nFLASK_DEBUG=True\n```\n\n### API Rate Limits\nAirtable API has rate limits:\n- 5 requests per second per base\n- The application includes automatic rate limiting handling\n\n## üì± Mobile Responsiveness\n\nThe application is fully responsive and works on:\n- Desktop computers\n- Tablets\n- Mobile phones\n- All modern browsers\n\n## üîí Security Features\n\n- Secure API key management through environment variables\n- CSRF protection on all forms\n- Input validation and sanitization\n- Session-based security\n- Secure HTTP headers\n\n## üß™ Testing\n\n### Manual Testing\n1. Test all CRUD operations\n2. Verify Airtable synchronization\n3. Check form validations\n4. Test responsive design\n5. Verify chart functionality\n\n### Sample Data\nThe application includes sample data for testing:\n- 5 sample vendors\n- 10 sample services\n- 15 sample bookings\n- Payment records\n- Customer feedback\n\n## üöÄ Deployment\n\n### Replit Deployment\n1. Fork this Replit\n2. Add your environment variables in Secrets\n3. Click \"Run\" to start the application\n4. Use the deployment feature for production\n\n### Local Deployment\n1. Set up virtual environment\n2. Install dependencies\n3. Configure environment variables\n4. Run with `python main.py`\n\n## üìä Performance Optimization\n\n- Efficient Airtable API usage\n- Caching for frequently accessed data\n- Optimized database queries\n- Compressed static assets\n- Lazy loading for charts\n\n## üîÑ Data Flow\n\n1. **User Input** ‚Üí Flask Routes ‚Üí Airtable API\n2. **Airtable Data** ‚Üí Python Processing ‚Üí Template Rendering\n3. **Real-time Updates** ‚Üí API Calls ‚Üí DOM Updates\n4. **Analytics** ‚Üí Data Aggregation ‚Üí Chart Visualization\n\n## üõ†Ô∏è Customization\n\n### Adding New Features\n1. Create new routes in `main.py`\n2. Add corresponding HTML templates\n3. Update navigation in `base.html`\n4. Add Airtable table if needed\n\n### Styling Changes\n1. Modify `static/style.css`\n2. Update Bootstrap classes in templates\n3. Customize chart colors and themes\n\n### API Extensions\n1. Add new endpoints in Flask\n2. Implement proper error handling\n3. Update documentation\n\n## üìû Support\n\nFor support and questions:\n- Email: support@aicodeagency.lk\n- Documentation: This README\n- Airtable API Docs: [https://airtable.com/developers](https://airtable.com/developers)\n\n## üìù License\n\nThis project is licensed under the MIT License. See LICENSE file for details.\n\n## ü§ù Contributing\n\n1. Fork the project\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Open a Pull Request\n\n## üìà Future Enhancements\n\n- [ ] Real-time notifications\n- [ ] Advanced analytics with ML\n- [ ] Mobile app development\n- [ ] Integration with accounting software\n- [ ] Automated report generation\n- [ ] Multi-language support\n- [ ] Advanced user management\n- [ ] API documentation with Swagger\n\n## ‚ö° Performance Tips\n\n1. **Optimize Airtable Calls**: Batch operations when possible\n2. **Use Caching**: Cache frequently accessed data\n3. **Lazy Load**: Load charts and heavy content on demand\n4. **Compress Images**: Optimize static assets\n5. **Monitor Usage**: Track API rate limits\n\n---\n\n**Built with ‚ù§Ô∏è by AI Code Agency**\n\n*Empowering businesses with intelligent automation and seamless data management.*",

   "requirements.txt": "Flask==2.3.3\npyairtable==2.0.0\nrequests==2.31.0\nWerkzeug==2.3.7\nJinja2==3.1.2\nMarkupSafe==2.1.3\nitsdangerous==2.1.2\nclick==8.1.7\nblinker==1.6.3\npython-dotenv==1.0.0\nFlask-WTF==1.1.1\nWTForms==3.0.1\nFlask-CORS==4.0.0",

   ".replit": "run = \"python main.py\"\nmodules = [\"python-3.10\"]\n\n[nix]\nchannel = \"stable-23_05\"\n\n[env]\nPYTHONPATH = \"$REPLIT_HOME/$REPL_SLUG:$PYTHONPATH\"\nPATH = \"$REPLIT_HOME/$REPL_SLUG/.pythonlibs/bin:$PATH\"\nPIP_USER = \"1\"\nPYTHONUSERBASE = \"$REPLIT_HOME/$REPL_SLUG/.pythonlibs\"\n\n[gitHubImport]\nrequiredFiles = [\".replit\", \"replit.nix\"]\n\n[deployment]\nrun = [\"sh\", \"-c\", \"python main.py\"]\ndeploymentTarget = \"autoscale\"\n\n[[ports]]\nlocalPort = 5000\nexternalPort = 80",

   "replit.nix": "{ pkgs }: {\n  deps = [\n    pkgs.python310Full\n    pkgs.replitPackages.prybar-python310\n    pkgs.replitPackages.stderred\n  ];\n  env = {\n    PYTHON_LD_LIBRARY_PATH = pkgs.lib.makeLibraryPath [\n      # Needed for pandas / numpy\n      pkgs.stdenv.cc.cc.lib\n      pkgs.zlib\n      # Needed for pygame\n      pkgs.glib\n      # Needed for matplotlib\n      pkgs.xorg.libX11\n    ];\n    PYTHONHOME = \"${pkgs.python310Full}\";\n    PYTHONBIN = \"${pkgs.python310Full}/bin/python3.10\";\n    LANG = \"en_US.UTF-8\";\n    STDERREDBIN = \"${pkgs.replitPackages.stderred}/bin/stderred\";\n    PRYBAR_PYTHON_BIN = \"${pkgs.replitPackages.prybar-python310}/bin/prybar-python310\";\n  };\n}",

   ".gitignore": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nPIPFILE.lock\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Coda docs\n# https://help.coda.io/en/articles/3521856-getting-started-with-the-coda-pack-sdk\n.coda-pack.json\n\n# Local environment variables\n.env.local\n.env.*.local\n\n# Replit specific\n.replit_zip_error_log.txt\n.upm/\nvenv/\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n*~",

   "LICENSE": "MIT License\n\nCopyright (c) 2024 AI Code Agency\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSoftware."
 }
}